// @flow
import { type Color } from './Colors'
import MaskObj from '../../store/masks/MaskObj'

export type Surface = {
  id: number,
  role: string,
  thumb: string,
  mask: MaskObj,
  hitArea: string,
  shadows?: string,
  highlights?: string,
  blobUrl?: string
}

export type Variant = {
  image: string,
  thumb: string,
  variant_name: string,
  name: string,
  surfaces: Surface[],
  normalizedImageValueCurve: string
}

export type Scene = {
  id: number,
  width: number,
  height: number,
  variant_names: string[],
  variants: Variant[]
}

export type ScenePayload = {
  count: number,
  scenes: Scene[],
  type: string
}

export type SurfaceStatus = {
  id: number,
  color?: Color
}

export type SceneStatus = {
  id: number,
  variant: string,
  surfaces: SurfaceStatus[]
}

export type SceneWorkspace = {
  sceneId: number,
  surfaceId: number,
  imageData: string,
  variant: string
}

// New types form PRISM 3.0
export type MiniColor = {
  brandKey: string,
  id: string | number,
  colorNumber: string | number,
  red: number,
  blue: number,
  green: number,
  L: number,
  A: number,
  B: number,
  hex: string
}

export type FlatScene = {
  id: number,
  width: number,
  height: number,
  variantNames: string[],
  // variants prop is only used during transformation and should not be used at rest!
  variants?: any[] | null,
  sceneType: string,
  uid: string
}

export type FlatVariant = {
  surfaceMask: string,
  surfaceId: number,
  sceneId: number,
  variantName: string,
  sceneType: string,
  // blob urls are not currently set when initialized but after they have been loaded
  surfaces: Surface[],
  image: string,
  thumb: string,
  description: string,
  normalizedImageValueCurve: string,
  sceneCategories?: string[] | null,
  expertColorPicks: number[] | null,
  isFirstOfKind?: boolean
}
