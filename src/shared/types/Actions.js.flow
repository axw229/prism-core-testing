// @flow
import type { CategorizedColorIdGrid, Color, ColorIdList, ColorList, ColorMap, ColorStatuses, FamilyStructure } from './Colors'

export type GridRefState = { current: ?{
  recomputeGridSize: () => void,
  scrollToCell: ({ rowIndex: number, columnIndex: number}) => void,
  scrollToPosition: ({ scrollLeft: number, scrollTop: number }) => void,
  state: { scrollLeft: number, scrollTop: number }
} }

export type ReduxAction = {
  type: string,
  payload: any
}

export type Section = {
  name: string,
  default: boolean,
  families: string[]
}

export type SectionCollection = Section[]

export type ColorsStateItems = {
  brights?: CategorizedColorIdGrid,
  colorMap?: ColorMap,
  colors?: CategorizedColorIdGrid,
  colorStatuses?: ColorStatuses,
  unorderedColors?: ColorIdList,
  sectionLabels?: {
    [?string]: (?string)[]
  }
}

export type ColorsStateStatus = {
  loading: boolean,
  error: boolean,
  activeRequest: boolean
}

export type ChunkGridParams = {
  gridWidth: number,
  chunkWidth?: number,
  chunkHeight?: number,
  firstRowLength?: number,
  wrappingEnabled: boolean,
  dynamicCellSizingEnabled: boolean
}

export type ScrollPosition = { scrollLeft: number, scrollTop: number }

export type Layout = {
  name: string,
  unChunkedChunks: number[][],
  chunkGridParams: ChunkGridParams,
  families: { name: string, unChunkedChunks: number[][], chunkGridParams: ChunkGridParams }[]
}

export type ColorsState = {
  emitColor?: { color: Color, timestamp: number },
  status: ColorsStateStatus,
  items: ColorsStateItems,
  structure?: FamilyStructure,
  layouts?: Layout[],
  unChunkedChunks: number[][],
  chunkGridParams: ChunkGridParams,
  sections?: string[],
  section?: string,
  families?: string[],
  family?: string,
  search: {
    results?: ColorList,
    suggestions?: string[],
    count?: number,
    query: string,
    loading: boolean,
    error: boolean,
    active: boolean
  },
  initializeWith: { section?: string, family?: string },
}
