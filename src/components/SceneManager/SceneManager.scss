:root {
  #{ getVarName('scenes.hitAreaOutlineColor') }: getVar('scenes.hitAreaOutlineColor');
}

.prism-scene-manager {
  $hit-area-outline-color: var(getVarName('scenes.hitAreaOutlineColor'));
  // TODO: Remove this once :root var declarations can be fixed in this build
  // hardcoding magenta as an outline color for now
  $hit-area-outline-color: magenta;

  $btn-active-color: $color-near-black;
  $btn-active-color-text: $color-white;
  $btn-focus-color: getVar('colors.primary');
  $btn-focus-color-text: $color-near-white;
  $btn-border-size: 2px;

  $icon-size: round($base * .7);
  $icon-spacing: round($base * .125);

  $self: &;

  @keyframes flashHitArea {
    0% {
      fill: rgba(white,0);
    }

    40% {
      fill: rgba(white,.1);
    }

    100% {
      fill: rgba(white,0);
    }
  }

  @keyframes pulseHitAreaOutline {
    0% {
      stroke: rgba($hit-area-outline-color, .5);
      stroke-width: 5px;
    }

    90%, 100% {
      stroke: rgba($hit-area-outline-color, 1);
      stroke-width: 10px;
    }
  }

  @keyframes fadeIn {
    0%, 25% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  display: flex;
  flex-direction: column;
  font-size: $base;
  width: 100%;
  height: 100%;

  &__loader {
    color: getVar('colors.primary');
    left: 50%;
    position: absolute;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
  }

  &__block {
    align-items: center;
    display: flex;
    flex-direction: row;
    justify-content: center;

    // BEGIN TODO: REMOVE
    & > * {
      flex: 1 1;
    }
    // END TODO: REMOVE

    &--scenes {
      order: -1;
    }

    &--tabs {
      padding: 5px 0 0;
      justify-content: flex-start;
    }
  }

  &__flag {
    color: inherit;
    fill: currentColor;
    position: absolute;
    font-size: $icon-size;
    top: $icon-spacing;
    left: $icon-spacing;
    z-index: 1;
  }

  &__btn {
    float: left;
    margin: 0 0 0 $btn-border-size;
    max-width: 110px;
    padding: 0;
    position: relative;
    z-index: 1;
    color: $btn-active-color-text;

    &:first-child {
      margin-left: 0;
    }

    &::before {
      content: '';
      position: absolute;
      display: block;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
    }

    &:hover, &:focus {
      color: $btn-focus-color-text;

      &::after {
        border-top-color: $btn-focus-color;
        border-left-color: $btn-focus-color;
      }

      &::before {
        box-shadow: inset 0 0 0 $btn-border-size $btn-focus-color;
      }
    }

    img {
      display: block;
      max-width: 100%;
    }

    &--active {
      &::after {
        content: '';
        top: 0;
        display: block;
        width: 0;
        height: 0;
        position: absolute;
        left: 0;
        border-top: $icon-size solid $btn-active-color;
        border-left: $icon-size solid $btn-active-color;
        border-bottom: $icon-size solid transparent;
        border-right: $icon-size solid transparent;
      }
    }

    &--disabled {
      opacity: .2;
    }
  }

  &__scene-wrapper {
    position: relative;
    overflow: hidden;
  }

  &__scene {
    background: black;
    clear: both;
    display: block;
    max-width: 100%;
    width: 100%;

    &--disabled {
      filter: saturate(0) brightness(.5) contrast(.75);
      pointer-events: none;
    }

    &__inner {
      height: 0;
      padding: 0;
      position: relative;
      width: 100%;
    }

    &__svg-defs {
      height: 0;
      position: absolute;
      width: 0;
      z-index: -1;
    }

    &__overlay,
    &__tint-wrapper,
    &__preview-wrapper,
    &__hit-wrapper {
      height: 100%;
      left: 0;
      position: absolute;
      top: 0;
      width: 100%;
    }

    &__natural {
      display: block;
      width: 100%;
      position: relative;
      height: auto;
    }

    &__preview-wrapper {
      pointer-events: none;

      &__preview {
        opacity: 0;
        transition: opacity .3s ease-in .0s;
        will-change: opacity;

        &--active {
          opacity: 1;
          transition: opacity .1s ease-out;
        }
      }
    }

    &__hit-area-wrapper,
    &__hit-area,
    &__surface {
      height: 100%;
      left: 0;
      pointer-events: none;
      position: absolute;
      top: 0;
      width: 100%;
    }

    &__hit-area {
      &__mask-loader {
        height: 0;
        position: absolute;
        width: 0;
        z-index: -1;
        visibility: hidden;
      }

      &__mask {
        cursor: pointer;
        fill: transparent;
        opacity: 0;
        pointer-events: all;
        stroke: rgba($hit-area-outline-color, .5);
        stroke-width: 5px;
        transition: opacity .4s ease-out;
        // don't you dare remove this line.
        will-change: opacity;

        &--hover,
        &:hover {
          animation-delay: .2s, 0s;
          animation-direction: normal, alternate;
          animation-duration: .4s, .6s;
          animation-iteration-count: 1, infinite;
          animation-name: flashHitArea, pulseHitAreaOutline;
          animation-timing-function: ease-in-out, ease-out;
          opacity: 1;
          transition: opacity .2s ease-in-out;
        }
      }
    }

    &__overlay {
      animation-name: fadeIn;
      animation-duration: .5s;
      animation-timing-function: ease-in-out;
      align-items: center;
      display: flex;
      justify-content: center;
      padding: .5em;
      background: pick-visible-color(getVar('colors.primary'), $color-black, $color-white);
      color: rgba(getVar('colors.primary'), $color-near-opacity);

      &__content {
        color: inherit;
        font-weight: bold;
        font-size: .8em;
        text-align: center;
      }

      &--loading {
        // same as default
      }

      &--error {
        background: rgba(getVar('colors.error'), $color-near-opacity);
        color: pick-visible-color(getVar('colors.error'), $color-black, $color-white);
      }

      &--message {
        background: rgba(getVar('colors.primary'), $color-near-opacity);
        color: pick-visible-color(getVar('colors.primary'), $color-black, $color-white);
      }
    }
  }
}