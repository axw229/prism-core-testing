// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot testing 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en-US"
  messages={
    Object {
      "ADD_A_COLOR": "ADD A COLOR",
      "ALL_COLORS": "All Colors",
      "BACK_TO_COLOR_WALL": "Back to Color Wall",
      "CANCEL": "Cancel",
      "CANVAS_UNSUPPORTED": "Your browser does not support the canvas element.",
      "CHIP_MAXIMIZED": "Color Chip has been maximized",
      "CHIP_MINIMIZED": "Color Chip has been minimized",
      "COLOR_COLLECTIONS": "Color Collections",
      "COLOR_FAMILIES": "Color Families",
      "COORDINATING_COLORS": "Coordinating Colors",
      "DELETE_PIN": "Delete pin",
      "DETAILS": "Details",
      "DISPLAY_SCENE_PAINTER": "Display the Scene Painter",
      "ERROR_BOUNDARY.ERROR_DETAILS": "Error details",
      "ERROR_BOUNDARY.MESSAGE": "We encountered an error preventing us from rendering this component at this time.",
      "ERROR_BOUNDARY.SHOW_DETAILS": "Show error details",
      "ERROR_BOUNDARY.TITLE": "Sherwin-Williams Color Tools Error",
      "ERROR_LOADING_COLORS": "We're unable to load colors right now.",
      "EXTERIOR": "Exterior",
      "FIND_COLORS_IN_CW": "FIND COLORS IN THE DIGITAL COLOR WALL",
      "HIDE_SCENE_PAINTER": "Hide the Scene Painter",
      "IMAGE_INVISIBLE": "This image is invisible to the user.",
      "INTERIOR": "Interior",
      "LOCATION_NUMBER": "Location Number",
      "MAXIMIZE_COLOR_SWATCH": "Maximize the Color Swatch",
      "NO_COLORS_AVAILABLE": "No colors available.",
      "PAINT_TOOLS.BACK": "Go back",
      "PAINT_TOOLS.CLOSE": "Close tooltip",
      "PAINT_TOOLS.DEFINEAREA": "Create a polygon to fill",
      "PAINT_TOOLS.DELETEGROUP": "Delete the group",
      "PAINT_TOOLS.ERASE": "Remove paint by erasing",
      "PAINT_TOOLS.FORWARD": "Go forward",
      "PAINT_TOOLS.GROUP": "Group the selections",
      "PAINT_TOOLS.HIDEPAINT": "Hide the painted area",
      "PAINT_TOOLS.INFO": "Toggle the tool tips",
      "PAINT_TOOLS.PAINTAREA": "fill a continuous area with color",
      "PAINT_TOOLS.PAINTBRUSH": "Paint using a brush",
      "PAINT_TOOLS.REDO": "Redo an action",
      "PAINT_TOOLS.REMOVEAREA": "Erase an area by creating a polygon",
      "PAINT_TOOLS.SELECTAREA": "Select an area to manipulate",
      "PAINT_TOOLS.TOOLTIPS.DEFINEAREA": "Outline an area to paint it. Be sure to enclose the area by starting and ending at the same point.",
      "PAINT_TOOLS.TOOLTIPS.ERASE": "Remove paint from your scene.",
      "PAINT_TOOLS.TOOLTIPS.HIDEPAINT": "Use this tool to see the original room scene.",
      "PAINT_TOOLS.TOOLTIPS.INFO": "Click here to revisit the Tool Tips.",
      "PAINT_TOOLS.TOOLTIPS.PAINTAREA": "Use the Paint Area feature to automatically detect and paint surface areas. Just click or tap on a surface to highlight it, then click or tap again.",
      "PAINT_TOOLS.TOOLTIPS.PAINTBRUSH": "Allows for the freehand painting of your selected scene. Just point, click or tap and drag to add color to any area.",
      "PAINT_TOOLS.TOOLTIPS.REDO": "Step forward from your last action.",
      "PAINT_TOOLS.TOOLTIPS.REMOVEAREA": "Use this tool to select and remove paint from a defined area.",
      "PAINT_TOOLS.TOOLTIPS.SELECTAREA": "Select an area, then use the tool bar to paint, edit paint colors or remove paint from your scene.",
      "PAINT_TOOLS.TOOLTIPS.SELECTGROUP": "Use this tool to group and edit multiple areas at the same time. Use the Delete tool to remove areas from your scene.",
      "PAINT_TOOLS.TOOLTIPS.UNDO": "Step backwards from your last action.",
      "PAINT_TOOLS.TOOLTIPS.ZOOM": "Zoom in and pan around within your scene to paint small areas with increased accuracy.",
      "PAINT_TOOLS.UNDO": "Undo an action",
      "PAINT_TOOLS.UNGROUP": "Ungroup the selections",
      "PAINT_TOOLS.ZOOM": "Adjust the zoom level",
      "PALETTE_TITLE": "My Color Palette",
      "RESTORE_COLOR_SWATCH_TO_DEFAULT_SIZE": "Restore the Color Swatch to default size",
      "SCENE_DISPLAYED": "Scene is displayed",
      "SCENE_HIDDEN": "Scene is hidden",
      "SEARCH.ERROR.GENERIC": "We were unable to perform your search.",
      "SEARCH.ERROR.HEADLINE": "Something went wrong.",
      "SEARCH.FIND_A_COLOR": "Find a color",
      "SEARCH.NO_RESULTS": "Sorry, no color matches found.",
      "SEARCH.PROMPT": "Enter a color name, number, or family in the text field above.",
      "SEARCH.SEARCH": "Search",
      "SEARCH.SEARCHING": "Searching",
      "SEARCH.SEARCH_BY": "Search by color name or number",
      "SEARCH.SEARCH_COLOR": "Search color",
      "SEARCH.SUGGESTIONS": "Some examples of things you can search for are {suggestions}",
      "SELECT_COLLECTION": "Select Color Collection",
      "SIMILAR_COLORS": "Similar Colors",
      "SWATCH_ACTIVATED_DETAILS": "{color} is selected. Press Enter to view details.",
      "SWATCH_FOCUS": "{color}. Press Enter to select.",
      "TO_DAY_VIEW": "Switch to day view",
      "TO_NIGHT_VIEW": "Switch to night view",
      "VIEW_DETAILS": "View Details",
      "VIEW_DETAILS_FOR": "View details for {name}",
      "ZOOM_IN": "Zoom in",
      "ZOOM_OUT": "Zoom out",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <InspiredSceneNavigator
        collectionTabs={Array []}
        flatData={Array []}
        loadData={[Function]}
        setHeader={
          [MockFunction] {
            "calls": Array [
              Array [
                "Inspirational Photos",
              ],
              Array [
                "Inspirational Photos",
              ],
              Array [
                "Inspirational Photos",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        tabMap={Object {}}
      >
        <div
          className="color-collections__wrapper"
        >
          <ColorCollectionsTab
            collectionTabs={Array []}
            showTab={[Function]}
            tabIdShow="tab0"
          >
            <div
              className="color-collections__tab-list-select"
            >
              <span
                className="color-collections__tab-list-heading"
              >
                Choose a Collection
              </span>
              <span
                className="color-collections__tab-list-dropdown-mobile"
                onClick={[Function]}
                onKeyDown={[Function]}
                role="button"
                tabIndex="-1"
              >
                Choose collection
              </span>
              <ul
                className="color-collections__tab-list color-collections__tab-list--inactive"
              />
            </div>
          </ColorCollectionsTab>
          <div
            className="color-collections__collections-list"
          >
            <EnhanceComponent
              data={Array []}
              defaultItemsPerView={1}
              isInfinity={true}
              showTab={[Function]}
              tabMap={Object {}}
            >
              <div
                className="prism-slick-carousel__wrapper"
              >
                <div
                  className="prism-slick-carousel__wrapper__content"
                >
                  <div
                    className="prism-slick-carousel__wrapper__content__prev-btn__wrapper"
                  >
                    <button
                      className="prism-slick-carousel__wrapper__content__buttons "
                      onClick={[Function]}
                    >
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        fixedWidth={false}
                        flip={null}
                        icon={
                          Array [
                            "fa",
                            "chevron-left",
                          ]
                        }
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size={null}
                        spin={false}
                        swapOpacity={false}
                        symbol={false}
                        title=""
                        transform={null}
                      >
                        <svg
                          aria-hidden="true"
                          className="svg-inline--fa fa-chevron-left fa-w-10 "
                          data-icon="chevron-left"
                          data-prefix="fa"
                          focusable="false"
                          role="img"
                          style={Object {}}
                          viewBox="0 0 320 512"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z"
                            fill="currentColor"
                            style={Object {}}
                          />
                        </svg>
                      </FontAwesomeIcon>
                    </button>
                  </div>
                  <div
                    className="prism-slick-carousel__wrapper__content__list__wrapper prism-slick-carousel__wrapper__content__list__wrapper--loop"
                  >
                    <div
                      className="collection-list__container  "
                      style={
                        Object {
                          "transform": "translateX(-100%)",
                        }
                      }
                    />
                  </div>
                  <div
                    className="prism-slick-carousel__wrapper__content__next-btn__wrapper"
                  >
                    <button
                      className="prism-slick-carousel__wrapper__content__buttons "
                      onClick={[Function]}
                    >
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        fixedWidth={false}
                        flip={null}
                        icon={
                          Array [
                            "fa",
                            "chevron-right",
                          ]
                        }
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size={null}
                        spin={false}
                        swapOpacity={false}
                        symbol={false}
                        title=""
                        transform={null}
                      >
                        <svg
                          aria-hidden="true"
                          className="svg-inline--fa fa-chevron-right fa-w-10 "
                          data-icon="chevron-right"
                          data-prefix="fa"
                          focusable="false"
                          role="img"
                          style={Object {}}
                          viewBox="0 0 320 512"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"
                            fill="currentColor"
                            style={Object {}}
                          />
                        </svg>
                      </FontAwesomeIcon>
                    </button>
                  </div>
                </div>
                <div
                  className="prism-slick-carousel__wrapper__indicators"
                />
              </div>
            </EnhanceComponent>
          </div>
        </div>
      </InspiredSceneNavigator>
    </Router>
  </Provider>
</IntlProvider>
`;
