// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot testing for activeslot component  ActiveSlot component should match snapshot 1`] = `
<ContextProvider
  value={
    Object {
      "dragDropManager": DragDropManagerImpl {
        "backend": HTML5Backend {
          "actions": Object {
            "beginDrag": [Function],
            "drop": [Function],
            "endDrag": [Function],
            "hover": [Function],
            "publishDragSource": [Function],
          },
          "altKeyPressed": false,
          "asyncEndDragFrameId": null,
          "currentDragSourceNode": null,
          "currentNativeHandle": null,
          "currentNativeSource": null,
          "dragEnterTargetIds": Array [],
          "dragOverTargetIds": null,
          "dragStartSourceIds": null,
          "dropTargetIds": Array [],
          "endDragIfSourceWasRemovedFromDOM": [Function],
          "endDragNativeItem": [Function],
          "enterLeaveCounter": EnterLeaveCounter {
            "entered": Array [],
            "isNodeInDocument": [Function],
          },
          "getSourceClientOffset": [Function],
          "handleSelectStart": [Function],
          "handleTopDragEndCapture": [Function],
          "handleTopDragEnter": [Function],
          "handleTopDragEnterCapture": [Function],
          "handleTopDragLeaveCapture": [Function],
          "handleTopDragOver": [Function],
          "handleTopDragOverCapture": [Function],
          "handleTopDragStart": [Function],
          "handleTopDragStartCapture": [Function],
          "handleTopDrop": [Function],
          "handleTopDropCapture": [Function],
          "isNodeInDocument": [Function],
          "monitor": DragDropMonitorImpl {
            "registry": HandlerRegistryImpl {
              "dragSources": Map {},
              "dropTargets": Map {},
              "pinnedSource": null,
              "pinnedSourceId": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
              "types": Map {},
            },
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
          },
          "mouseMoveTimeoutTimer": null,
          "options": OptionsReader {
            "globalContext": [Window],
          },
          "registry": HandlerRegistryImpl {
            "dragSources": Map {},
            "dropTargets": Map {},
            "pinnedSource": null,
            "pinnedSourceId": null,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "types": Map {},
          },
          "sourceNodeOptions": Map {},
          "sourceNodes": Map {},
          "sourcePreviewNodeOptions": Map {},
          "sourcePreviewNodes": Map {},
        },
        "handleRefCountChange": [Function],
        "isSetUp": false,
        "monitor": DragDropMonitorImpl {
          "registry": HandlerRegistryImpl {
            "dragSources": Map {},
            "dropTargets": Map {},
            "pinnedSource": null,
            "pinnedSourceId": null,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "types": Map {},
          },
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
      },
    }
  }
>
  <ActiveSlot
    color={
      Object {
        "blue": 219,
        "brandKey": "SW",
        "colorFamilyNames": Array [
          "Red",
        ],
        "colorNumber": "6561",
        "coordinatingColors": Object {
          "coord1ColorId": 2250,
          "coord2ColorId": 1926,
          "whiteColorId": 2681,
        },
        "cssrgb": "rgb(235,209,219)",
        "description": Array [
          "Subdued",
          "Muted",
          "Brilliant",
          "Radiant",
        ],
        "green": 209,
        "hex": "#ebd1db",
        "hue": 0.935897435897436,
        "id": "2248",
        "isDark": false,
        "isExterior": true,
        "isInterior": true,
        "lightness": 0.8705882352941177,
        "lrv": 68.551,
        "name": "Teaberry",
        "red": 235,
        "rgb": 15454683,
        "saturation": 0.39393939393939387,
        "similarColors": Array [
          "2255",
          "2262",
          "2269",
          "2662",
          "2535",
          "2276",
          "2658",
          "1974",
          "2543",
          "2531",
        ],
        "storeStripLocator": "102-C1",
      }
    }
    connectDragSource={[MockFunction]}
    connectDropTarget={[MockFunction]}
  />
</ContextProvider>
`;
