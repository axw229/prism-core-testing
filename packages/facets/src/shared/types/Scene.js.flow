// @flow

export type Surface = {
  id: number,
  role?: string,
  thumb?: string,
  hitArea?: string,
  shadows?: string,
  highlights?: string,
  surfaceBlobUrl?: string
}

export type Variant = {
  image: string,
  thumb: string,
  variant_name: string,
  name: string,
  surfaces: Surface[],
  normalizedImageValueCurve: string
}

// New types from PRISM 3.0
export type MiniColor = {
  brandKey: string,
  id: string | number,
  colorNumber: string | number,
  red: number,
  blue: number,
  green: number,
  L: number,
  A: number,
  B: number,
  hex: string,
  isExterior?: boolean
}

export type FlatScene = {
  id: number,
  width: number,
  height: number,
  variantNames: string[],
  // variants prop is only used during transformation and should not be used at rest!
  variants?: any[] | null,
  sceneType: string,
  uid: string,
  description: string
}

export type FlatVariant = {
  sceneUid: string,
  sceneId: number,
  variantName: string,
  sceneType: string,
  // blob urls are not currently set when initialized but after they have been loaded
  surfaces: Surface[],
  image: string,
  thumb: string,
  normalizedImageValueCurve: string,
  sceneCategories?: string[] | null,
  expertColorPicks: number[] | null,
  isFirstOfKind?: boolean
}

// This is much more like a protocol than a classic type
export type ReferenceDimensions = {
  originalImageWidth: number,
  originalImageHeight: number,
  imageWidth: number,
  imageHeight: number,
  portraitWidth: number,
  portraitHeight: number,
  landscapeWidth: number,
  landscapeHeight: number,
  isPortrait: boolean,
  originalIsPortrait: boolean
}

export type ProcessedImageMetadata = {
  imageHeight?: number,
  imageWidth?: number,
  isPortrait?: boolean,
  landscapeHeight?: number,
  landscapeWidth?: number,
  originalImageHeight: number,
  originalImageWidth: number,
  originalIsPortrait: boolean,
  portraitHeight?: number,
  portraitWidth?: number,
  url: string
}
